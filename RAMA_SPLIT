#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jul  8 14:50:59 2019

@author: joe
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jul  8 14:34:31 2019

@author: joe
"""
##############################################################################
#l is number in the list, i is column, 
def fs(l,i):
    global h

    f = open ("rama_ic.xvg", "r")

    for line in f:
        data = f.readlines()
    
    h = []
    v = 0
    while v < l:
        if i<2:
            
            dx = data[v].split()
            h.append(float(dx[i]))
            #^for columns 0 and 1
            v+=1
        else:
            dx = data[v].split()
            h.append(dx[i])
            #^for columns 2
            #print(dx[0])
            v+=1
    #print(h)
    #print(h[0])    
##############################################################################
#FILE LENGHT#

def file_len(fname):
    with open(fname) as f:
        for i, l in enumerate(f):
            pass
    print(i + 1)
##############################################################################
#STRIP DATA#
file_len("rama_ic.xvg")

fs(40079,0)
f1 = h

fs(40079,1)
f2 = h

fs(40079,2)

f3 = h

print("h",h[0])
print("f1",f1[0])
print("f2",f2[0])
print("f3",f3[0])

##############################################################################
#PLOT#


x = f1
y = f2
z = f3
##############################################################################
# libraries
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import kde
  
# Evaluate a gaussian kde on a regular grid of nbins x nbins over data extents
nbins=3000
k = kde.gaussian_kde([x,y])
xi, yi = np.mgrid[-180:180:nbins*1j, -180:180:nbins*1j]
zi = k(np.vstack([xi.flatten(), yi.flatten()]))
 
# Make the plot
plt.pcolormesh(xi, yi, zi.reshape(xi.shape))
plt.show()
 
# Change color palette
#plt.pcolormesh(xi, yi, zi.reshape(xi.shape), cmap=plt.cm.Greens_r)
#plt.show()



















