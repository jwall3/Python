#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Nov 12 11:29:31 2020

@author: joe
"""

import numpy as np
import pandas as pd
import math
from scipy.spatial import KDTree

###############################################################################

#FUNCTIONS FROM PAPER

###############################################################################  


#Creates the spherical lines

def spherical_coordinate(x,y):

    return [math.cos(x) * math.cos(y),

            math.sin(x) * math.cos(y), math.sin(y)]

#Creates the actual N points   
def NX(n, x):
    pts=[]
    start = (-1. + 1. / (n - 1.) )
    increment = (2. - 2. / (n -1.)) / (n -1.)
    
    for j in range(0, n):
        s = start + j * increment
        pts.append(
        spherical_coordinate(
        s * x, math.pi / 2. *
        math.copysign(1, s) *
        (1. - math.sqrt(1. -abs(s)))
        ))

    return pts

#Generates complete set of points in a list of lists
def generate_points(n):
    return NX(n, 0.1 + 1.2 * n)

###############################################################################

#MY FUNCTIONS

###############################################################################  
#Split the generated points into XYZ and multiply by radius.

def xyz(col):

    global points
    points = []
    c = 0
    for v in genplot:
        value = ((genplot[c][col])/2*SIZE)
        points.append(value)
        c+=1


def fs(leng,column,pfn):
    global variable
    variable = []
    f = open (pfn, "r")

    for line in f:
        data = f.readlines()
 
    variable = []
    value = 0
    while value < leng:
        if value>0:
            dx = data[value].split()
            variable.append(dx[column])
            value+=1
        else:
         value+=1
    return(variable)


def split(leng, pfn):
    #pfn = "peptide.gro"
    peptide_gro = {}

    v = 0
    while v<6:
        peptide_gro["var"+str(v)] = fs(leng,v,pfn)
        v+=1

    global Pep_Name
    Pep_Name = (peptide_gro['var0'])
    global Atom_Name
    Atom_Name = (peptide_gro['var1'])
    global Atom_Number
    Atom_Number = (peptide_gro['var2'])
    global X_Coor
    X_Coor = (peptide_gro['var3'])
    global Y_Coor
    Y_Coor = (peptide_gro['var4'])
    global Z_Coor
    Z_Coor = (peptide_gro['var5'])

   
###############################################################################

#Defining the system

###############################################################################   
FNO = "TESTPEP.gro"
NUMPEPT = 400
SIZE = 14
FileName = "TEST \n"
FileLen = 169810
###############################################################################

#RUNNING

###############################################################################  


with open ("au-cubic.gro", "r") as f:
    with open (FNO, "w") as fo:
        fo.write(FileName)
        fo.write("%5s \n" %(FileLen))
        ln = 0
        b = 0
        for line in f:
            if ln < 2:
                ln+=1
            elif ln > 5627880:
                break
            else:
                col = line.split()                
                pp = col[0]
                atom = str(col[1]) 
                x = float(col[-6])
                y = float(col[-5])
                z = float(col[-4])
                r = math.sqrt((x**2)+(y**2)+(z**2))
                if ln % 2 == 0:
                    if r < SIZE/2:
                        fo.write(line)
                        ln+=1
                        b+=1
                    else:
                        ln+=1
                else:
                    if b == 1:
                        fo.write(line)
                        ln+=1
                        b-=1
                    else:      
                        ln+=1


genplot = (generate_points(NUMPEPT))
xyz(0)
XPOINTS = points
xyz(1)
YPOINTS = points
xyz(2)
ZPOINTS = points

### X Y Z POINTS IS THE POS OF SG if SG  0 0 0.
### Need to make x, y, z to NN AUB = 0.3
#### TEST SET 

'''
XPOINTS = [7,-7,0,0,0,0]
YPOINTS = [0,0,7,-7,0,0]
ZPOINTS = [0,0,0,0,7,-7]
'''

az_all = []
ay_all= []


count1 = 0
for v in XPOINTS:
    x = v
    y = YPOINTS[count1]
    z = ZPOINTS[count1]
    
    if x > 0:
        if y == 0:
            az = 0
        else:
            az = math.atan(y/x)
    
    elif x < 0:
        if y == 0:
            az = math.pi
        else:
            az = math.atan(y/x)+math.pi
    
    else:
        if y >=0:
            az = math.pi*0.5
        else:
            az = math.pi*1.5
    ax = 0
    ay = math.asin(-z/math.sqrt(x**2+y**2+z**2))

    #az_all.append(az)
    #ay_all.append(ay)
    count1+=1

    split(292, "peptide.gro")
    count2=0
    for v in X_Coor:
        with open (FNO, "a") as f:
            X = float(v)
            Y = float(Y_Coor[count2])
            Z = float(Z_Coor[count2])
            



            X = X+(SIZE/2)
            Y = Y
            Z = Z
            XOLD = X
            YOLD = Y
            ZOLD = Z
            
            
            
            
            
            
            X = XOLD
            Y = YOLD*math.cos(ax)-ZOLD*math.sin(ax)
            Z = YOLD*math.sin(ax)+ZOLD*math.cos(ax)
            XOLD = X
            YOLD = Y
            ZOLD = Z
            
    
            X = XOLD*math.cos(ay)+ZOLD*math.sin(ay)
            Y = YOLD
            Z = ZOLD*math.cos(ay)-XOLD*math.sin(ay)
            XOLD = X
            YOLD = Y
            ZOLD = Z
            
            X = XOLD*math.cos(az)-YOLD*math.sin(az)
            Y = XOLD*math.sin(az)-YOLD*math.cos(az)
            Z = ZOLD
    
            
            PN = (Pep_Name[count2])
            ANa = (Atom_Name[count2])
            ANu = (Atom_Number[count2])         
            f.write("%8s%7s%5d%8.3f%8.3f%8.3f%8.3f%8.3f%8.3f \n" % (PN, ANa, count2,X,Y,Z,0,0,0))
            #print(XPOINTS[c1])
        count2+=1
with open (FNO, "a") as f:
    f.write("%10.5f%10.5f%10.5f \n" % (2,2,2))            
    
    
