#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan 20 11:09:09 2020
@author: joe
"""
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec 10 14:21:21 2019
@author: joe
"""
###############################################################################

#FUNCTIONS FROM PAPER

###############################################################################  

import math

#Creates the spherical lines

def spherical_coordinate(x,y):

    return [math.cos(x) * math.cos(y),

            math.sin(x) * math.cos(y), math.sin(y)]

#Creates the actual N points   
def NX(n, x):
    pts=[]
    start = (-1. + 1. / (n - 1.) )
    increment = (2. - 2. / (n -1.)) / (n -1.)
    
    for j in range(0, n):
        s = start + j * increment
        pts.append(
        spherical_coordinate(
        s * x, math.pi / 2. *
        math.copysign(1, s) *
        (1. - math.sqrt(1. -abs(s)))
        ))

    return pts

#Generates complete set of points in a list of lists
def generate_points(n):
    return NX(n, 0.1 + 1.2 * n)

###############################################################################

#MY FUNCTIONS

###############################################################################  
#Split the generated points into XYZ and multiply by radius.

def xyz(col):

    global points
    points = []
    c = 0
    for v in genplot:
        value = ((genplot[c][col])/2*SIZE)
        points.append(value)
        c+=1


def fs(leng,column,pfn):
    global variable
    variable = []
    f = open (pfn, "r")

    for line in f:
        data = f.readlines()
 
    variable = []
    value = 0
    while value < leng:
        if value>0:
            dx = data[value].split()
            variable.append(dx[column])
            value+=1
        else:
         value+=1
    return(variable)


def split(leng):
    pfn = "peptide.gro"
    peptide_gro = {}

    v = 0
    while v<6:
        peptide_gro["var"+str(v)] = fs(leng,v,pfn)
        v+=1

    global Pep_Name
    Pep_Name = (peptide_gro['var0'])
    global Atom_Name
    Atom_Name = (peptide_gro['var1'])
    global Atom_Number
    Atom_Number = (peptide_gro['var2'])
    global X_Coor
    X_Coor = (peptide_gro['var3'])
    global Y_Coor
    Y_Coor = (peptide_gro['var4'])
    global Z_Coor
    Z_Coor = (peptide_gro['var5'])

###############################################################################

##                      VECTOR FUNCTIONS                                    ###

###############################################################################
def CP(V1, V2):
    global V3
    cx =  (V1[1]*V2[2])-(V1[2]*V2[1])
    cy =  (V1[2]*V2[0])-(V1[0]*V2[2])
    cz =  (V1[0]*V2[1])-(V1[1]*V2[0])
    V3 = [cx, cy, cz]
    return V3

def DP(V1, V2):
    global V3
    V3 = ((V1[0]*V2[0])+(V1[1]*V2[1])+(V1[2]*V2[2]))
    return V3

def NO(V1):
    global V3
    V3 = math.sqrt((V1[0]**2)+(V1[1]**2)+(V1[2]**2))
    return V3

def MULTI(V1, V2):
    global V3
    V3 = [V1[0]*V2,V1[1]*V2,V1[2]*V2]   
    return V3

def PROD(V1, V2):
    global V3
    V3 = [V1[0]*V2[0],V1[1]*V2[1],V1[2]*V2[2]]   
    return V3

def DIV(V1, V2):
    global V3
    if V2 == 0:
        V3 = [0.0,1.0,0.0]
    else:
        V3 = [V1[0]/V2, V1[1]/V2, V1[2]/V2]
    return V3

def PLUS(V1, V2):
    global V3
    V3 = [V1[0]+V2[0],V1[1]+V2[1],V1[2]+V2[2]]
    return V3

def MINUS(V1,V2):
    global V3
    V3 = [V1[0]-V2[0],V1[1]-V2[1],V1[2]-V2[2]]
    return V3
   
###############################################################################

#Defining the system

###############################################################################   
FNO = "TESTPEP.gro"
NUMPEPT = 900
SIZE = 14
###############################################################################

#RUNNING

###############################################################################  
genplot = (generate_points(NUMPEPT))
xyz(0)
XPOINTS = points
xyz(1)
YPOINTS = points
xyz(2)
ZPOINTS = points
 
FileName = "TEST \n"
FileLen = 1812
c=0
with open (FNO, "a") as f:
    f.write(FileName)
    f.write("%5s \n" %(FileLen))
    for v in XPOINTS:
        xa = (XPOINTS[c])
        ya = (YPOINTS[c])
        za = (ZPOINTS[c])
        q = c+1
        p=(q) 
        f.write("%5d%-5s%5s%5d%8.3f%8.3f%8.3f \n" % (p, "AU2", "AUB", p, xa, ya, za))
        c+=1 
 
split(302)
c1 = 0
for v in XPOINTS:
    OS  = [7,0,0]
    OSf = [XPOINTS[c1], YPOINTS[c1], ZPOINTS[c1]]
    CPosf = CP(OS, OSf)
    Nosf = NO(CPosf)
    k = DIV(CPosf,Nosf)
    thetaprod = (DP(OS, OSf))/ (NO(OS) * NO(OSf))
    theta = math.acos(thetaprod)

    c2=0
    for v in X_Coor:
        with open (FNO, "a") as f:
            xcoor = float(X_Coor[c2])+7
            ycoor = float(Y_Coor[c2])
            zcoor = float(Z_Coor[c2])
            OA = [xcoor, ycoor, zcoor]
            SA = MINUS(OA, OS)
            SfAf1 = MULTI(SA,math.cos(theta))

            SfAf2_1 = MULTI(SA,math.sin(theta))
            SfAf2_2 = CP(k,SfAf2_1)
           
            SfAf3_1 = DP(k,SA)
            SfAf3_2 = MULTI(k, SfAf3_1)
            SfAf3_3 = MULTI(SfAf3_2, (1-math.cos(theta)))

            SfAf_pre = PLUS(SfAf3_3, SfAf2_2)
            SfAf = PLUS(SfAf_pre, SfAf1)
            
            OAf = PLUS(OSf, SfAf)

            PN = (Pep_Name[c2])
            ANa = (Atom_Name[c2])
            ANu = (Atom_Number[c2])
            x = float(OAf[0])
            y = float(OAf[1])
            z = float(OAf[2])           
            f.write("%8s%7s%5d%8.3f%8.3f%8.3f \n" % (PN, ANa, c2,x,y,z))
        c2+=1
    c1+=1
with open (FNO, "a") as f:
    f.write("%10.5f%10.5f%10.5f \n" % (2,2,2))   
