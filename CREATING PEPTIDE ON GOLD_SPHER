#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec 10 14:21:21 2019

@author: joe
"""
###############################################################################

#FUNCTIONS FROM PAPER
    
###############################################################################   
import math

#Creates the spherical lines
def spherical_coordinate(x,y):
    return [math.cos(x) * math.cos(y),
            math.sin(x) * math.cos(y), math.sin(y)]

#Creates the actual N points    
def NX(n, x):
    pts=[]
    start = (-1. + 1. / (n - 1.) )
    increment = (2. - 2. / (n -1.)) / (n -1.)
    for j in range(0, n):
        s = start + j * increment
        pts.append(
        spherical_coordinate(
        s * x, math.pi / 2. *
        math.copysign(1, s) *
        (1. - math.sqrt(1. -abs(s)))
        ))
       
    return pts

#Generates complete set of points in a list of lists
def generate_points(n):
    return NX(n, 0.1 + 1.2 * n)

###############################################################################

#MY FUNCTIONS
    
###############################################################################   
#Split the generated points into XYZ and multiply by radius.
def xyz(col):
    global points
    points = []
    c = 0
    for v in genplot:
        value = ((genplot[c][col])/2*SIZE)
        points.append(value)
        c+=1

#A function to open a file = pfn. Split each column into a list with length leng
# depending on value of column (0-6 in pfn), it is saved to "variable"
def fs(leng,column,pfn):
    global variable
    variable = []
    f = open (pfn, "r")

    for line in f:
        data = f.readlines()

    variable = []
    value = 0
    while value < leng:
        if value>0:
            dx = data[value].split()
            variable.append(dx[column])
            value+=1
        else:
         value+=1
    #print(variable)
    return(variable)


#Split uses the func fn, to open pfn and save each column to a list named Varx, 
# where x = column num. These are then replaced with actual names and added to
# a dictionary of lists with the name as the key.
def split(leng):
    pfn = "peptide.gro"
    #pep_len(pfn)    
    
    peptide_gro = {}
    
    v = 0
    while v<6:
        peptide_gro["var"+str(v)] = fs(leng,v,pfn)
        v+=1
    
    
    global Pep_Name
    Pep_Name = (peptide_gro['var0'])
    global Atom_Name
    Atom_Name = (peptide_gro['var1'])
    global Atom_Number
    Atom_Number = (peptide_gro['var2'])
    global X_Coor
    X_Coor = (peptide_gro['var3'])
    global Y_Coor
    Y_Coor = (peptide_gro['var4'])
    global Z_Coor
    Z_Coor = (peptide_gro['var5'])

def spherical():
    c = 0
    global R
    R = math.sqrt((XPOINTS[0]**2)+(YPOINTS[0]**2)+(ZPOINTS[0]**2))
    global THETAS
    THETAS = []
    global RHOS
    RHOS = []
    for v in XPOINTS:
        RHO = math.atan2(YPOINTS[c], XPOINTS[c])
        RHOS.append(RHO)
        THETA = math.acos(ZPOINTS[c]/R)
        THETAS.append(THETA)
        c+=1
    print("H",THETAS, RHOS)
    
    
def POINTS():
    global XNEWS
    XNEWS = []
    global YNEWS
    YNEWS = []
    global ZNEWS
    ZNEWS= []

    c = 0
    for x in XPOINTS:
        XNEW = R*math.sin(RHOS[c])*math.cos(THETAS[c])
        XNEWS.append(XNEW)
        YNEW = R*math.sin(RHOS[c])*math.sin(THETAS[c])
        YNEWS.append(YNEW)
        ZNEW = R*math.cos(RHOS[c])
        ZNEWS.append(ZNEW)
        c+=1

    return XNEWS, YNEWS, ZNEWS
###############################################################################

#Defining the system
    
###############################################################################    
FNO = "TESTPEP.gro"
NUMPEPT = 6
SIZE = 14


###############################################################################

#RUNNING
    
###############################################################################   
genplot = (generate_points(NUMPEPT))
xyz(0)
XPOINTS = points
xyz(1)
YPOINTS = points
xyz(2)
ZPOINTS = points


#testPOINTS
XPOINTS = [7,-7,0,0,0,0]
YPOINTS = [0,0,7,-7,0,0]
ZPOINTS = [0,0,0,0,7,-7]





FileName = "TEST \n"
FileLen = 272101
c=0
with open (FNO, "a") as f:
    f.write(FileName)
    f.write("%5s \n" %(FileLen))
    for v in XPOINTS: 
        xa = (XPOINTS[c])
        ya = (YPOINTS[c])
        za = (ZPOINTS[c])
        q = c+1
        p=(q)  
        f.write("%5d%-5s%5s%5d%8.3f%8.3f%8.3f \n" % (p, "AU2", "AUB", p, xa, ya, za))
        c+=1  






spherical()
split(302)


c1 = 0
for v in XPOINTS: 
    theta = THETAS[c1]
    print("this thetaaa \n", theta)
    rho = RHOS[c1]
    print("RHOOOOOO \n", rho)
    c2=0
    for v in X_Coor:
        with open (FNO, "a") as f:
            xcoor = float(X_Coor[c2])+(7)
            ycoor = float(Y_Coor[c2])
            zcoor = float(Z_Coor[c2])
            RP = math.sqrt((xcoor**2)+(ycoor**2)+(zcoor**2))
            
            rhoINIT = math.atan2(ycoor,xcoor)
            #print("rhooinittt \n", rhoINIT)
            rhoFINAL = rhoINIT+rho
            #print("rhoFINALLLLEEE", rhoFINAL)
            #print(rhoFINAL)
            thetaINIT = math.acos(zcoor/ RP)
            #print("thetas", thetaINIT)
            thetaFINAL = thetaINIT + theta
            #print(thetaFINAL)
            
            #XNEWCOOR = RP*math.sin(rhoFINAL)*math.cos(thetaFINAL)
            XNEWCOOR = RP*math.cos(thetaFINAL)
            #YNEWCOOR = RP*math.sin(rhoFINAL)*math.sin(thetaFINAL)
            YNEWCOOR = RP*math.sin(thetaFINAL)
            ZNEWCOOR = RP*math.cos(rhoFINAL)            

            PN = (Pep_Name[c2])
            ANa = (Atom_Name[c2])
            ANu = (Atom_Number[c2])
            x = float(XNEWCOOR)
            y = float(YNEWCOOR)            
            z = float(ZNEWCOOR)            
            f.write("%8s%7s%5d%8.3f%8.3f%8.3f \n" % (PN, ANa, c2,x,y,z))

        c2+=1  
    c1+=1

with open (FNO, "a") as f:
    f.write("%10.5f%10.5f%10.5f \n" % (2,2,2))   


    
