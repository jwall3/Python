#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Dec  9 18:39:58 2019

@author: joe
"""

import math

#Define the xyz points to move cys to.
def points(FNO):

    FileName = "TEST \n"
    FileLen = 272101
   
    c=0

    with open (FNO, "a") as f:
        f.write(FileName)
        f.write("%5s \n" %(FileLen))
        for v in x:
            print(v)  
            xa = (x[c])
            ya = (y[c])
            za = (z[c])
            q = c+1
            p=(q)  
            f.write("%5d%-5s%5s%5d%8.3f%8.3f%8.3f \n" % (p, "AU2", "AUB", p, xa, ya, za))
            c+=1
            
#Defining theta for rotation around x,y z.
def theta():            

    
    c=0
    global thetasxy
    global thetaszx
    global thetasyz
    thetasxy = []
    thetaszx = []
    thetasyz = []
    
    for p in x:
            xa = (x[c])
            ya = (y[c])
            za = (z[c])

            thetaxy = (math.atan2(ya,xa) -math.pi)
            thetasxy.append(thetaxy)
            thetazx = (math.atan2(za,xa)- math.pi)
            thetaszx.append(thetazx)
            thetayz = (math.atan2(ya,za)- math.pi)
            thetasyz.append(thetayz)
            c+=1
    global thetas      
    thetas = (thetasxy, thetaszx, thetasyz)        
    
    print("THIS IS THETAS",thetasxy)



###############################################################################
#Works out how many lines = atoms in Peptide.gro and saves as Leng.
#Opens peptide.gro as pfn.
def pep_len(pfn):
    global leng
    with open(pfn) as f:
        for leng, l in enumerate(f):
            pass

    print(leng)

#A function to open a file = pfn. Split each column into a list with length leng
# depending on value of column (0-6 in pfn), it is saved to "variable"
def fs(leng,column,pfn):
    global variable
    variable = []
    f = open (pfn, "r")

    for line in f:
        data = f.readlines()

    variable = []
    value = 0
    while value < leng:
        if value>0:
            dx = data[value].split()
            variable.append(dx[column])
            value+=1
        else:
         value+=1
    #print(variable)
    return(variable)


#Split uses the func fn, to open pfn and save each column to a list named Varx, 
# where x = column num. These are then replaced with actual names and added to
# a dictionary of lists with the name as the key.
def split(leng):
    pfn = "peptide.gro"
    #pep_len(pfn)    
    
    peptide_gro = {}
    
    v = 0
    while v<6:
        peptide_gro["var"+str(v)] = fs(leng,v,pfn)
        v+=1
    
    
    global Pep_Name
    Pep_Name = (peptide_gro['var0'])
    global Atom_Name
    Atom_Name = (peptide_gro['var1'])
    global Atom_Number
    Atom_Number = (peptide_gro['var2'])
    global X_Coor
    X_Coor = (peptide_gro['var3'])
    global Y_Coor
    Y_Coor = (peptide_gro['var4'])
    global Z_Coor
    Z_Coor = (peptide_gro['var5'])
    
    
def add_pep():
    with open (FNO, "a") as f:
        sp=(len(X_Coor))
        c = 0
        while c < sp: 
        #for v in X_Coor:
            PN = (Pep_Name[c])
            ANa = (Atom_Name[c])
            ANu = (Atom_Number[c])
            x = float(X_Coor[c])
            y = float(Y_Coor[c])            
            z = float(Z_Coor[c])            
            print(PN)
            print(ANa)
            print(ANu)
            print(x,y,z)
            
            
            
            f.write("%8s%7s%5d%8.3f%8.3f%8.3f \n" % (PN, ANa, c,x,y,z))   
            c +=1
   
#f.write("%5d%-5s%5s%5d%8.3f%8.3f%8.3f%8.4f%8.4f%8.4f \n" % (p, Pep_Name, Atom_Name, Atom_Number, X_Coor, Y_Coor, Z_Coor))
#c+=1  
##############################################################################

#RUNNING THE ABOVE
size = 14.00
d = 0.231
FNO = "peptide6ro.gro"

x = [7,-7,0,0,0,0]
y = [0,0,7,-7,0,0]
z = [0,0,0,0,7,-7]
points(FNO)
theta()

split(302)
add_pep()
#pep_len("peptide.gro")

###############################################################################


print(X_Coor)
print(Y_Coor)
print(Z_Coor)




xfinal = []
yfinal = []
zfinal = []


#x = [1]
c1 = 0
for p in x:
    c2 = 0
    for v in X_Coor:
        with open (FNO, "a") as f:
            #split(302)
    
            xold = float(X_Coor[c2])
            yold = float(Y_Coor[c2])
            zold = float(Z_Coor[c2])
        
        #Translate along x.
            xnew = (xold+((size)/2))
            xold = xnew
        #Rotate around z
            xnew = (xold*math.cos(thetaszx[c1]))+(zold*math.sin(thetaszx[c1]))
            znew = (zold*math.cos(thetaszx[c1]))-(xold*math.sin(thetaszx[c1]))
            ynew = yold
            
            xold=xnew
            yold=ynew
            zold=znew
        #Rotate around y

            
            xnew = (xold*math.cos(thetasxy[c1]))-(yold*math.sin(thetasxy[c1]))
            ynew = (xold*math.sin(thetasxy[c1]))+(yold*math.cos(thetasxy[c1]))
            znew = zold
            '''         
            xold=xnew
            yold=ynew
            zold=znew
        #Rotate around x
            
            ynew = (yold*math.cos(thetasyz[c1]))-(zold*math.sin(thetasyz[c1]))
            znew = (yold*math.sin(thetasyz[c1]))+(zold*math.cos(thetasyz[c1]))
            xnew = xold
            '''
        #Appened to the list 
        
            xfinal.append(xnew)
            yfinal.append(ynew)
            zfinal.append(znew)


            PN = (Pep_Name[c2])
            ANa = (Atom_Name[c2])
            ANu = (Atom_Number[c2])
            x = float(xnew)
            y = float(ynew)            
            z = float(znew)            
            f.write("%8s%7s%5d%8.3f%8.3f%8.3f \n" % (PN, ANa, c2,x,y,z))   
                
        c2+=1
    c1+=1

with open (FNO, "a") as f:
    f.write("%10.5f%10.5f%10.5f \n" % (2,2,2))

#print("XFINAL",xfinal)
#print("C1=", c1)
#print("C2=", c2)
print 
